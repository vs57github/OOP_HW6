Взять реализованный код в рамках семинара 3 , 4 или 5 и продемонстрировать применение принципов, усвоенных на семинаре.
Нужно в проекте прокомментировать участки кода, которые рефакторим, какой принцип применяем и почему.

Формат сдачи: ссылка на гитхаб проект
ХХХХХХХХХХХХХХХХХХХХХХХХХХХХХХХХХХ
Предоставленный код демонстрирует применение нескольких принципов проектирования SOLID, а также использование наследования, инкапсуляции и интерфейсов.

1. Принцип единой ответственности (S в SOLID):
    - Интерфейс CalculatorModel (в CalculatorModel.java) определяет единственную ответственность для реализующего класса, которая заключается в выполнении математических операций.

2. Принцип открытия-закрытия (O в SOLID):
    - Интерфейс CalculatorModel открыт для расширения и закрыт для модификации. Его можно расширить для поддержки новых операций (например, извлечения квадратного корня) без изменения существующего кода.

3. Принцип замены Лисков (L в SOLID):
    - В этом коде нет явного использования наследования. Однако этот принцип применяется косвенно через реализацию интерфейса. Любой класс, реализующий интерфейс CalculatorModel, можно использовать взаимозаменяемо с классом CalculatorModelImpl, обеспечивая взаимозаменяемость.

4. Принцип разделения интерфейса (I в SOLID):
    - Интерфейс CalculatorView (в CalculatorView.java) следует принципу разделения интерфейса, определяя только те методы, которые необходимы для взаимодействия между CalculatorPresenter и реализацией CalculatorView.

5. Принцип инверсии зависимостей (D в SOLID):
    - Класс CalculatorPresenter представляет инверсию зависимостей, поскольку он опирается на абстракции (интерфейсы) как для CalculatorModel, так и для CalculatorView, а не на конкретные реализации. Это обеспечивает гибкость и легкую замену различных реализаций.

6. Инкапсуляция:
    - Переменные экземпляра классов объявляются как частные, например, сканер в ConsoleCalculatorView.java. Это инкапсулирует внутреннее состояние объектов, позволяя контролировать доступ и манипулирование данными.

7. Наследование:
    - Хотя это не используется явно в предоставленном фрагменте кода, наследование может быть применено для расширения функциональности. Например, вы можете создать новый класс GraphicalCalculatorView, который наследуется от CalculatorView и предоставляет графический интерфейс пользователя.

В целом код демонстрирует принципы SOLID, разделяя задачи, обеспечивая гибкость и возможность повторного использования, а также инкапсулируя данные. Код также использует интерфейсы для определения контрактов и наследования, чтобы обеспечить расширение и настройку.
Predostavlennyy kod demonstriruyet primeneniye neskol'kikh printsipov proyektirovaniya SOLID, a takzhe ispol'zovaniye nasledovaniya, inkapsulyatsii i interfeysov.